# ten genes

# established alleles are A, B, C, D, E, f, g, h, i, j.  
# starting proportion of minority gene is initial_prop.
# starting population is initial_pop

from __future__ import division
from random import random

genes = ( ("AA", "Aa", "aa"), ("BB", "Bb", "bb"), ("CC", "Cc", "cc"), ("DD", "Dd", "dd"), ("EE", "Ee", \
"ee" ), ("FF", "Ff", "ff"), ("GG", "Gg", "gg"), ("HH", "Hh", "hh"), ("II", "Ii", "ii"), ("JJ", "Jj", "jj"))

def reset_population(initial_pop, initial_prop):
  global p
	global completion
	global pop_size_history
	p = []
	for indv in range(initial_pop): p.append([])
	for gene in range(0,5):
		for indv in range(len(p)): p[indv].append(genes[gene][0]) # sets default gene
		min_genes = 2 * int(initial_prop*initial_pop) # number of "minority" genes we need to give out
		while min_genes > 0:
			indv = int( random() * initial_pop )
			if p[indv][gene] == genes[gene][0] :
				p[indv][gene] = genes[gene][1]
				min_genes -= 1
			elif p[indv][gene] == genes[gene][1] :
				p[indv][gene] = genes[gene][2]
				min_genes -= 1
	for gene in range(5,10):
		for indv in range(len(p)): p[indv].append(genes[gene][2]) # sets default gene
		min_genes = 2 * int(initial_prop*initial_pop) # number of "minority" genes we need to give out
		while min_genes > 0:
			indv = int( random() * initial_pop )
			if p[indv][gene] == genes[gene][2] :
				p[indv][gene] = genes[gene][1]
				min_genes -= 1
			elif p[indv][gene] == genes[gene][1] :
				p[indv][gene] = genes[gene][0]
				min_genes -= 1
	completion = []
	pop_size_history = [initial_pop, 0, initial_pop, initial_pop]
	for gene in range(10):
		completion.append(False)



def pop_stress():
	print "Population before stress:", len(p)
	kill_list = []
	for indv in range(len(p)):
		for gene in range(5):
			r = random()
			if indv not in kill_list:
				if r > .9 and ( p[indv][gene] == genes[gene][0] or p[indv][gene] == genes[gene][1] ):
					kill_list.append(indv)
				elif r > .95 and p[indv][gene] == genes[gene][2]:
					kill_list.append(indv)
		for gene in range(5,10):
			r = random()
			if indv not in kill_list:
				if r > .9 and p[indv][gene] == genes[gene][2]:
					kill_list.append(indv)
				elif r > .95 and ( p[indv][gene] == genes[gene][0] or p[indv][gene] == genes[gene][1] ):
					kill_list.append(indv)
	for indv in kill_list[::-1]:
		p.remove(p[indv])
	print "Population after stress:", len(p)
	if len(p) < pop_size_history[0]:
		pop_size_history[0] = len(p)
	elif len(p) > pop_size_history[1]:
		pop_size_history[1] = len(p)
		
def reproduction():
	global p
	offspring = []
	if len(p)%2 == 1:
		unlucky = int(random()*len(p))
		p.remove(p[unlucky])
	if len(p) > initial_pop * .7 :
		num_offspring = 2
	elif len(p) > initial_pop * .6:
		num_offspring = 3
	elif len(p) > initial_pop * .5:
		num_offspring = 4
	elif len(p) > initial_pop * .4:
		num_offspring = 5
	elif len(p) > initial_pop * .3:
		num_offspring = 6
	else: num_offspring = 7
	while p != []:
		X = p.pop( int( random()*len(p) ) )
		Y = p.pop( int( random()*len(p) ) )
		for o in range(num_offspring):
			new_offspring = []
			for gene in range(10):
				r = random()
				if r > .5: new_offspring.append(X[gene][0])
				else: new_offspring.append(X[gene][1])
				r = random()
				if r > .5: new_offspring[gene] += Y[gene][0]
				else: new_offspring[gene] += Y[gene][1]
			offspring.append(new_offspring)
	p = offspring
	print "Population after reproduction:", len(p)
	if len(p) < pop_size_history[2]:
		pop_size_history[2] = len(p)
	elif len(p) > pop_size_history[3]:
		pop_size_history[3] = len(p)

def pause():
	wait = raw_input(' + ')

def display_percentages(gen):
	pp = [gene for indv in p for gene in indv]
	v = ["" for var in range(60)]
	for gene in range(10):
		if completion[gene] == False:
			v[gene*6+1] = round( 100 * pp.count(genes[gene][0]) / len(p) , 1 )
			v[gene*6+5] = round( 100 * pp.count(genes[gene][2]) / len(p) , 1 )
			v[gene*6+3] = round( 100 -v[gene*6+1] -v[gene*6+5] , 1 )
			v[gene*6] = "  " if v[gene*6+1] <= 10 else " "
			v[gene*6+2] = "        " if v[gene*6+3] <= 10 else "       "
			v[gene*6+4] = "  " if v[gene*6+5] <= 10 else " "
			if v[gene*6+1] == 100:
				v[gene*6] = ""
				completion[gene] = ["dom", gen]
			if v[gene*6+5] == 100:
				v[gene*6+4] = ""
				completion[gene] = ["rec", gen]
		else:
			v[gene*6] = "All "
			if completion[gene][0] == "dom":
				v[gene*6+1] = "dominant "
			if completion[gene][0] == "rec":
				v[gene*6+1] = "recessive"
			v[gene*6+2] = "since generation "
			v[gene*6+3] = completion[gene][1]

	print """
            XX           Xx           xx

 A/a      {0}{1}  {2}{3}        {4}{5}

 B/b      {6}{7}  {8}{9}        {10}{11}

 C/c      {12}{13}  {14}{15}        {16}{17}

 D/d      {18}{19}  {20}{21}        {22}{23}

 E/e      {24}{25}  {26}{27}        {28}{29}

 F/f      {30}{31}  {32}{33}        {34}{35}

 G/g      {36}{37}  {38}{39}        {40}{41}

 H/h      {42}{43}  {44}{45}        {46}{47}

 I/i      {48}{49}  {50}{51}        {52}{53}

 J/j      {54}{55}  {56}{57}        {58}{59}
""".format(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], \
	v[10], v[11], v[12], v[13], v[14], v[15], v[16], v[17], v[18], v[19], \
	v[20], v[21], v[22], v[23], v[24], v[25], v[26], v[27], v[28], v[29], \
	v[30], v[31], v[32], v[33], v[34], v[35], v[36], v[37], v[38], v[39], \
	v[40], v[41], v[42], v[43], v[44], v[45], v[46], v[47], v[48], v[49], \
	v[50], v[51], v[52], v[53], v[54], v[55], v[56], v[57], v[58], v[59] )




for line in range(5):
	print ""
initial_pop = raw_input('initial population?   ')
while initial_pop.isdigit() == False:
	initial_pop = raw_input('initial population?   ')
initial_pop = int(initial_pop)
initial_prop = raw_input('initial proportion of minority gene?   ')
while len(initial_prop) < 2:
	while initial_prop[0] != "." or initial_prop[1:].isdigit() == False:
		initial_prop = raw_input('initial proportion of minority gene?   ')
initial_prop = float(initial_prop)
for line in range(5):
	print ""

reset_population(initial_pop, initial_prop)
generation = 0
cycle = 1
while cycle != "stop":
	if cycle == "reset":
		cycle = 1
		generation = 0
		reset_population(initial_pop, initial_prop)
	print "Generation:", generation
	#	pause()
	display_percentages(generation)
	if generation % int(cycle) == 0 :
		cycle = raw_input(' - + - + -            ')
		if cycle != "stop"  and cycle != "reset" and cycle.isdigit() == False:
			cycle = 1
		print ""
	if completion.count(False) == 0:
		cycle = "stop"
		output = [initial_pop, initial_prop, pop_size_history, [] ]
		print "Initial population:", initial_pop
		print "Initial proportion:", initial_prop
		print ""
		for gene in range(10):	
			print completion[gene][0], "- round", completion[gene][1]
			print ""
			output[3].append(completion[gene])
		print "Population low / high mark after stress:", pop_size_history[0], "/", pop_size_history[1]
		print "Population low / high mark after reproduction:", pop_size_history[2], "/", pop_size_history[3]
		print ""
		print output # save to file ???
	else:
#		pause()
		pop_stress()
#		pause()
		reproduction()
		generation += 1
